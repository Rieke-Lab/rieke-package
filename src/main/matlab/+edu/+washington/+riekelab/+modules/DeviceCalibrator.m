classdef DeviceCalibrator < symphonyui.ui.Module
    
    properties (Access = private)
        wizardCardPanel
        backButton
        nextButton
        cancelButton
    end
    
    methods
        
        function createUi(obj, figureHandle)
            import appbox.*;
            
            set(figureHandle, ...
                'Name', 'Device Calibrator', ...
                'Position', screenCenter(475, 290), ...
                'WindowStyle', 'modal', ...
                'Resize', 'off');
            
            mainLayout = uix.VBox( ...
                'Parent', figureHandle);
            
            wizardLayout = uix.VBox( ...
                'Parent', mainLayout);
            
            obj.wizardCardPanel = uix.CardPanel( ...
                'Parent', wizardLayout);
            
            % Instructions card.
            instructionsLayout = uix.VBox( ...
                'Parent', obj.wizardCardPanel, ...
                'Padding', 11);
            Label( ...
                'Parent', instructionsLayout, ...
                'String', sprintf(['<html><b>Instructions:</b><br>' ...
                    '&emsp;1. Tape the wand to the stage, face down.<br>' ...
                    '&emsp;2. Connect the wand BNC cable to the light meter input on front of the box.<br>' ...
                    '&emsp;3. Close the curtains and dim the lights.<br>' ...
                    '&emsp;4. Turn on the power meter and set the gain to 10^-3.<br>' ...
                    '&emsp;5. Make sure the current (background) reading is ~0.01 or lower.<br>' ...
                    '&emsp;6. Turn on the stimulation device to a reasonably bright setting.<br>' ...
                    '&emsp;7. Center and focus the wand relative to the spot:<br>' ...
                    '&emsp;&emsp;7.1. Move the stage in the X direction until you find the peak power reading.<br>' ...
                    '&emsp;&emsp;7.2. Move the stage in the Y direction until you find the peak power reading.<br>' ...
                    '&emsp;&emsp;7.3. Move the stage in the Z direction until the power reading stops increasing.<br>' ...
                    '&emsp;&emsp;7.4. Move the stage up a bit so the wand is not pushing on the condenser.<br>' ...
                    '&emsp;8. Press "Next" to start calibrating.</html>']));
            
            % Calibration card.
            calibrationLayout = uix.HBox( ...
                'Parent', obj.wizardCardPanel, ...
                'Padding', 11);
            Label( ...
                'Parent', calibrationLayout, ...
                'String', 'Calibration');
            
            set(obj.wizardCardPanel, 'Selection', 1);
                
            javacomponent('javax.swing.JSeparator', [], wizardLayout);
            
            set(wizardLayout, 'Heights', [-1 1]);
            
            controlsLayout = uix.HBox( ...
                'Parent', mainLayout, ...
                'Padding', 11);
            uix.Empty('Parent', controlsLayout);
            obj.backButton = uicontrol( ...
                'Parent', controlsLayout, ...
                'Style', 'pushbutton', ...
                'String', '< Back', ...
                'Interruptible', 'off', ...
                'Callback', @obj.onSelectedBack);
            obj.nextButton = uicontrol( ...
                'Parent', controlsLayout, ...
                'Style', 'pushbutton', ...
                'String', 'Next >', ...
                'Interruptible', 'off', ...
                'Callback', @obj.onSelectedNext);
            uix.Empty('Parent', controlsLayout);
            obj.cancelButton = uicontrol( ...
                'Parent', controlsLayout, ...
                'Style', 'pushbutton', ...
                'String', 'Cancel', ...
                'Interruptible', 'off', ...
                'Callback', @obj.onSelectedCancel);
            set(controlsLayout, 'Widths', [-1 75 75 7 75]);
            
            set(mainLayout, 'Heights', [-1 11+23+11]);
            
            % Set next button to appear as the default button.
            try %#ok<TRYNC>
                h = handle(figureHandle);
                h.setDefaultButton(obj.nextButton);
            end
        end
        
    end
    
    methods (Access = protected)
        
        function willGo(obj)
            obj.updateStateOfControls();
        end
        
    end
    
    methods (Access = private)
        
        function onSelectedBack(obj, ~, ~)
            selection = get(obj.wizardCardPanel, 'Selection');
            set(obj.wizardCardPanel, 'Selection', selection - 1);
            
            obj.updateStateOfControls();
        end
        
        function onSelectedNext(obj, ~, ~)
            selection = get(obj.wizardCardPanel, 'Selection');
            if selection < numel(get(obj.wizardCardPanel, 'Children'))
                set(obj.wizardCardPanel, 'Selection', selection + 1);
            end
            
            obj.updateStateOfControls();
        end
        
        function onSelectedCancel(obj, ~, ~)
            obj.stop();
        end
        
        function updateStateOfControls(obj)
            import appbox.*;
            
            set(obj.backButton, 'Enable', onOff(get(obj.wizardCardPanel, 'Selection') > 1));
        end
        
    end
    
end

